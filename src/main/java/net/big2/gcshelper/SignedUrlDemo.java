package net.big2.gcshelper;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.StatusLine;
import org.apache.http.client.fluent.Request;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.URLEncoder;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Signature;

import static com.google.common.base.Preconditions.checkState;

public class SignedUrlDemo {
    public static void main(String[] args) throws Exception {
        // TODO: edit before run
        String bucket = "test-bucket";
        // TODO: edit before run
        String filename = "/bob.txt";
        // TODO: edit before run
        String contentType = "text/plain";
        // TODO: edit before run
        byte[] data = "bob is here!".getBytes();

        long expiration = System.currentTimeMillis() + 1000 * 5;

        String signature = new Server().signString("PUT\n\n" + contentType + "\n" + expiration + "\n/" + bucket + filename);

        new Uploader().uploadFile(bucket, filename, contentType, expiration, signature, data);
    }
}

/**
 * This is used to simulate "my application server" trying to sign a string that will be used as signature by the "uploader".
 */
class Server {
    // TODO: edit before run
    public static final String KEY_FILENAME = "my-privatekey.p12";
    public static final String KEY_PASSWORD = "notasecret";

    /**
     * @param stringToSign As described in https://developers.google.com/storage/docs/accesscontrol#Signed-URLs
     * @return Base64 encoded signature.
     * @throws Exception
     */
    public String signString(String stringToSign) throws Exception {
        // load key
        PrivateKey key = loadKeyFromPkcs12(KEY_FILENAME, KEY_PASSWORD.toCharArray());

        // sign data
        Signature signer = Signature.getInstance("SHA256withRSA");
        signer.initSign(key);
        signer.update(stringToSign.getBytes("UTF-8"));
        byte[] rawSignature = signer.sign();

        return new String(Base64.encodeBase64(rawSignature, false), "UTF-8");
    }

    private static PrivateKey loadKeyFromPkcs12(String filename, char[] password) throws Exception {
        FileInputStream fis = new FileInputStream(filename);
        KeyStore ks = KeyStore.getInstance("PKCS12");

        ks.load(fis, password);
        return (PrivateKey) ks.getKey("privatekey", password);
    }

}

/**
 * This is used to simulate unauthenticated user attempting to upload data to Google Cloud Storage using the signature
 * generated by "my application server".
 */
class Uploader {
    // TODO: edit before run
    public static final String GOOGLE_ACCESS_ID = "xxx@developer.gserviceaccount.com";

    public String uploadFile(String bucket, String filename, String contentType, long expiration, String signature, byte[] data) throws IOException {

        // construct URL
        String url = "http://storage.googleapis.com/" + bucket + filename +
                "?GoogleAccessId=" + GOOGLE_ACCESS_ID +
                "&Expires=" + expiration +
                "&Signature=" + URLEncoder.encode(signature, "UTF-8");

        StatusLine statusLine = Request

                // construct request method, header & data to upload
                .Put(url)
                .addHeader("Content-Type", contentType)
                .bodyByteArray(data)

                        // send request to Google Cloud Storage
                .execute().returnResponse().getStatusLine();

        checkState(statusLine.getStatusCode() == 200, "Upload failed!");
        return statusLine.toString();

    }
}